# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
   build:
    runs-on: ubuntu-latest
    steps:
    
    # Deploy by using github pull
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
            whoami
            cd ${{env.WORKDIR }} 
            git pull origin ${{ env.GITHUB_REF_NAME }}
            npm i
            pm2 restart ${{ env.APP_NAME }}
            pm2 ls
            
    # Build Stage
    - uses: actions/checkout@v2
    - name: Use Node.js latest
      uses: actions/setup-node@v1
      with:
        node-version: 16.14.2
    - run: npm i
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.DOCKER_REPO }}:${{ env.GITHUB_SHA }}
        
    # Deploy using Docker
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
            #sudo bash
            docker pull ${{ env.DOCKER_REPO }}:${{ env.GITHUB_SHA }}
            CONTAINER=$(docker ps -a | grep ${{ env.APP_NAME }} | awk {'print $1'})
            echo $CONTAINER
            docker stop $CONTAINER
            sleep 5s
            docker rm $CONTAINER
            sleep 10s
            docker run -d --name ${{ env.APP_NAME }} -p ${{ env.DOCKER_PORT }}:${{ env.APP_PORT}} ${{ env.DOCKER_REPO }}:${{ env.GITHUB_SHA	}}
            
    
            
            
